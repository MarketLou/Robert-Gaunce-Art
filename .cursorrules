# Moat Automated Workflow Rules - Enhanced with ai-dev-tasks Methodology

You are an AI assistant that processes Moat UI annotations using structured, incremental workflows inspired by ai-dev-tasks.

## Primary Directives

### When asked to "process moat annotations" or "process moat tasks":
1. **Use @process-moat-tasks.mdc** for incremental processing with human verification
2. **Use @generate-moat-tasks.mdc** first if working with raw .moat-stream.jsonl
3. **Wait for human approval** between tasks (following ai-dev-tasks pattern)

### When viewing `.moat/.moat-stream.jsonl` or raw annotations:
1. **Use @generate-moat-tasks.mdc** to create structured task plan
2. **Group related changes** by component/area
3. **Prioritize tasks** (ðŸ”¥ High / âš¡ Medium / ðŸ’¡ Low)
4. **Then use @process-moat-tasks.mdc** for implementation

## Enhanced Workflow Commands

### Primary Commands (ai-dev-tasks inspired):
- **`@generate-moat-tasks.mdc`** - Transform annotations into structured task plan
- **`@process-moat-tasks.mdc`** - Implement tasks with human verification checkpoints
- **`@moat-enhanced-schema.mdc`** - Reference for task format documentation

### Legacy Commands (for simple auto-fixes):
- **`@moat-auto-fix.mdc`** - Quick automatic processing without verification
- **`@moat-rules.mdc`** - Original processing rules

## Processing Strategy

### For New Annotation Sessions:
```
1. User creates annotations in Chrome extension
2. Use @generate-moat-tasks.mdc to create implementation plan
3. Review plan with user
4. Use @process-moat-tasks.mdc for incremental implementation
5. Get human approval for each task before proceeding
```

### For Existing Task Lists:
```
1. Use @process-moat-tasks.mdc directly on .moat/moat-tasks.md
2. Process one task at a time
3. Wait for "yes" or feedback before proceeding
4. Update task status after each completion
```

## Task Format Integration

### Current Simple Format (legacy):
```markdown
## ðŸ“‹ Element Name
**Task:** Description
- **Element:** CSS selector
- **Status:** pending
```

### Enhanced Format (preferred):
```markdown
## ðŸ”¥ ðŸ“‹ Task 001: Element Name
**Priority**: High
**Type**: Styling
**Estimated Time**: 5 minutes

### Request
"Original user feedback"

### Technical Details  
- **Element**: CSS selector
- **Location**: file path
- **Dependencies**: Task IDs

### Status Tracking
- **Status**: ðŸ“‹ pending
- **Created**: timestamp
```

## Automation Commands

### Command: "generate moat tasks"
Use @generate-moat-tasks.mdc to analyze annotations and create structured plan

### Command: "process moat tasks" 
Use @process-moat-tasks.mdc to implement tasks with human verification

### Command: "process latest moat"
Use @process-moat-tasks.mdc starting with the most recent task

### Command: "watch moat" (legacy)
Continuously monitor and auto-process (without verification)

## Implementation Pattern

When processing tasks, follow this enhanced pattern:

1. **Announce Task**: Clear description of what will be changed
2. **Implement Change**: Apply the specific modification  
3. **Show Result**: Describe what was actually done
4. **Wait for Approval**: Get human "yes" before proceeding
5. **Update Status**: Mark task as completed
6. **Move to Next**: Continue to next pending task

## Best Practices

1. **Human Verification**: Always wait for approval between tasks
2. **Incremental Changes**: One task at a time, never batch without permission
3. **Clear Communication**: Explain what was changed and why
4. **Status Updates**: Keep moat-tasks.md current with progress
5. **Quality Focus**: Prioritize correctness over speed
6. **Context Preservation**: Maintain user intent throughout implementation

## Legacy Compatibility

### For Immediate Processing (no verification):
Still supported for simple changes:
```
Process latest annotation immediately using legacy @moat-auto-fix.mdc
```

### For Complex Changes:
Always prefer the new verified approach:
```
Use @generate-moat-tasks.mdc then @process-moat-tasks.mdc for complex changes
```

## Example Usage

### New Workflow:
```
User: "I have several annotations to process"
AI: Use @generate-moat-tasks.mdc to analyze and create plan
AI: Use @process-moat-tasks.mdc to implement with verification
```

### Legacy Workflow (still available):
```
User: "Process latest annotation quickly"  
AI: Use @moat-auto-fix.mdc for immediate processing
```

Remember: The goal is structured, verified UI feedback implementation that maintains quality while enabling efficient human-AI collaboration. 