---
description:
globs:
alwaysApply: false
---
# Process Moat Tasks - Incremental UI Feedback Implementation

You are an AI assistant that processes Moat UI annotations using a structured, incremental approach inspired by ai-dev-tasks.

## Core Directive
When given a `.moat/moat-tasks.md` file or asked to "process moat tasks", follow this systematic approach:

1. **Parse Task Structure**: Read and understand all pending tasks
2. **Process ONE Task at a Time**: Never attempt multiple tasks simultaneously  
3. **Wait for Human Approval**: After each task, wait for "yes" or feedback
4. **Mark Task Complete**: Update the task status before proceeding
5. **Provide Clear Progress**: Show what was done and what's next

## Task Processing Workflow

### Step 1: Initial Assessment
```
📋 **Moat Task Assessment**

Found [X] pending tasks in moat-tasks.md:
- Task 1: [elementLabel] - [brief description] 
- Task 2: [elementLabel] - [brief description]
- Task 3: [elementLabel] - [brief description]

I'll start with Task 1. Ready to proceed?
```

### Step 2: Single Task Execution
For each task, follow this pattern:

1. **Announce the Task**:
```
🎯 **Processing Task [N]: [elementLabel]**
Request: [annotation.content]
Target: [annotation.target]
File: [suggested file path]
```

2. **Implement the Change**:
   - Locate the component using the CSS selector
   - Apply the requested change (styling, positioning, content)
   - Preserve existing functionality
   - Add comment: `// Moat Task [N]: [description]`

3. **Show the Change**:
```
✅ **Task [N] Completed**
Change Applied: [specific description of what was changed]
File Modified: [actual file path]
Code Change: [brief snippet or description]

Ready for review. Type "yes" to mark complete and continue, or provide feedback for adjustments.
```

### Step 3: Wait for Approval
- **NEVER proceed to the next task automatically**
- Wait for explicit human confirmation ("yes", "looks good", "approved", etc.)
- If feedback is given, iterate on the current task until approved
- Only then mark the task as complete and move to the next

### Step 4: Task Completion
When approved, update the task status:
```
📝 **Updating Task Status**
Task [N] marked as: ✅ completed
Moving to Task [N+1]...
```

## Task Status Management

### Status Lifecycle:
- `📋 in queue` → `🔄 in progress` → `✅ completed` → `❌ cancelled`

### Status Updates:
When processing tasks, update the moat-tasks.md file by replacing:
```markdown
## 📋 [elementLabel]
**Status:** in queue
```

With:
```markdown  
## ✅ [elementLabel]
**Status:** completed
**Completed:** [timestamp]
**Applied:** [brief description of change]
```

## Implementation Rules

### UI Change Patterns:
- **Positioning**: Use CSS positioning or Tailwind utilities
- **Styling**: Prefer CSS custom properties and utility classes
- **Content**: Update text/HTML content directly
- **Layout**: Adjust display, flex, grid properties
- **Components**: Modify JSX/Vue/React components appropriately

### File Discovery:
1. Use `annotation.targetFile` hint first
2. Search for components matching CSS selector
3. Look in common directories: `/src`, `/pages`, `/components`
4. Ask for guidance if file location is unclear

### Error Handling:
If a task cannot be completed:
```
❌ **Task [N] Issue**
Problem: [description of issue]
Need help with: [specific question]

Options:
- Skip this task (type "skip")
- Provide more context
- Manual intervention required
```

## Batch Processing Mode

For related tasks, offer grouping:
```
🔍 **Related Tasks Detected**
Tasks [N], [N+1], [N+2] appear to be related ([styling/positioning/etc.]).

Process individually (type "one") or as a group (type "batch")?
```

If batch mode selected:
- Process all related tasks
- Show combined changes
- Request single approval for the group

## Example Processing Session

```
📋 **Moat Task Assessment**
Found 3 pending tasks:
- Task 1: Hero Title - "Make this blue"
- Task 2: Navigation Button - "Move to top right" 
- Task 3: Footer Text - "Change to smaller font"

Starting with Task 1...

🎯 **Processing Task 1: Hero Title**
Request: Make this blue
Target: h1.hero-title
File: src/components/Hero.tsx

[Applies change to make title blue]

✅ **Task 1 Completed**
Change Applied: Updated text color to blue (#3B82F6)
File Modified: src/components/Hero.tsx
Code Change: Added className="text-blue-500"

Ready for review. Type "yes" to mark complete and continue.

[Waits for human approval before proceeding to Task 2]
```

## Success Criteria

A task is successfully processed when:
- ✅ Change matches the annotation request
- ✅ Functionality is preserved
- ✅ Code is clean and follows project patterns
- ✅ Human has approved the change
- ✅ Task status is updated in moat-tasks.md

Remember: **Quality over speed**. Take time to understand each request and implement it correctly. Wait for human verification before moving to the next task.
