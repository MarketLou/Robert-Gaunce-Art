---
description:
globs:
alwaysApply: false
---
# Generate Moat Tasks - UI Feedback Task Creation

You are an AI assistant that transforms raw Moat UI annotations into structured, prioritized task lists for systematic implementation.

## Core Directive
When given raw `.moat-stream.jsonl` annotations or asked to "generate moat tasks", create a comprehensive task plan that groups related UI changes and provides clear implementation guidance.

## Task Generation Process

### Step 1: Annotation Analysis
Read all pending annotations and analyze for:

1. **Related Changes**: Group annotations that affect the same component/area
2. **Dependencies**: Identify changes that should happen in a specific order
3. **Complexity**: Assess difficulty level (simple, moderate, complex)
4. **Impact**: Determine scope (local component, global style, layout change)

### Step 2: Task Grouping Strategy

#### Group Types:
- **🎨 Styling Group**: Color, typography, spacing changes for same element
- **📐 Layout Group**: Positioning, alignment, sizing changes
- **🔧 Component Group**: Content, structure, functionality changes  
- **🌐 Global Group**: Changes affecting multiple elements/pages
- **🚀 Enhancement Group**: New features or major modifications

#### Priority Levels:
- **🔥 High**: Breaking issues, critical UX problems
- **⚡ Medium**: Important improvements, user-requested changes
- **💡 Low**: Nice-to-have enhancements, polish items

### Step 3: Task List Generation

Create a structured task list following this format:

```markdown
# Moat Implementation Plan

Generated from [X] UI annotations
Created: [timestamp]
Total Estimated Time: [X hours]

## 🔥 High Priority Tasks

### Task Group 1: [Group Name] 
**Estimated Time**: [X minutes]
**Affects**: [component/area name]
**Dependencies**: [none/Task Group X]

#### 1.1 [Element]: [Action Description]
- **Request**: "[original annotation content]"
- **Selector**: `[CSS selector]`
- **Type**: [styling/layout/content/enhancement]
- **Implementation**: [specific technical approach]
- **Files**: [list of files to modify]
- **Status**: 📋 pending

#### 1.2 [Element]: [Action Description]
- **Request**: "[original annotation content]"
- **Selector**: `[CSS selector]`
- **Type**: [styling/layout/content/enhancement] 
- **Implementation**: [specific technical approach]
- **Files**: [list of files to modify]
- **Status**: 📋 pending

### Task Group 2: [Group Name]
[Continue pattern...]

## ⚡ Medium Priority Tasks
[Continue grouping...]

## 💡 Low Priority Tasks  
[Continue grouping...]

## 📝 Implementation Notes

### Quick Wins (< 5 min each):
- [List simple tasks that can be done quickly]

### Complex Changes (> 15 min each):
- [List tasks requiring more planning/testing]

### Potential Issues:
- [Flag any annotations that might conflict or need clarification]

## 🎯 Recommended Processing Order

1. Start with Task Group [X] (foundational changes)
2. Process Task Group [Y] (dependent changes)
3. Complete remaining groups by priority
4. Test and validate all changes

Use `@process-moat-tasks.mdc` to implement these tasks systematically.
```

## Task Enhancement Rules

### Smart Grouping Logic:
1. **Element Proximity**: Group changes to nearby DOM elements
2. **Visual Relationships**: Group changes that affect the same visual area
3. **Technical Dependencies**: Group changes that modify the same files
4. **User Story Context**: Group changes that support the same user need

### Implementation Guidance:
For each task, provide specific technical direction:

- **CSS Classes**: Suggest specific class names or utilities
- **File Locations**: Identify likely component files
- **Approach**: Recommend CSS, JavaScript, or component changes
- **Testing**: Note areas that need verification

### Conflict Detection:
Flag potential issues:
- **Conflicting Styles**: Multiple annotations affecting same property
- **Layout Dependencies**: Changes that might break other elements  
- **Scope Ambiguity**: Unclear or overly broad selectors
- **Missing Context**: Annotations that need additional clarification

## Example Task Generation

### Input: Raw Annotations
```
1. "Make this blue" → h1.hero-title
2. "Increase font size" → h1.hero-title  
3. "Add margin below" → h1.hero-title
4. "Move to center" → .hero-section
5. "Change background" → .hero-section
```

### Output: Structured Task List
```markdown
# Moat Implementation Plan

## 🔥 High Priority Tasks

### Task Group 1: Hero Section Redesign
**Estimated Time**: 15 minutes
**Affects**: Hero section typography and layout
**Dependencies**: none

#### 1.1 Hero Title: Typography Updates
- **Request**: "Make this blue, increase font size"  
- **Selector**: `h1.hero-title`
- **Type**: styling
- **Implementation**: Update color to blue (#3B82F6) and increase font-size
- **Files**: styles.css or Hero.component.tsx
- **Status**: 📋 pending

#### 1.2 Hero Title: Spacing Adjustment
- **Request**: "Add margin below"
- **Selector**: `h1.hero-title` 
- **Type**: layout
- **Implementation**: Add margin-bottom: 1.5rem
- **Files**: styles.css or Hero.component.tsx
- **Status**: 📋 pending

#### 1.3 Hero Section: Layout & Background
- **Request**: "Move to center, change background"
- **Selector**: `.hero-section`
- **Type**: layout + styling
- **Implementation**: Add text-align: center and update background
- **Files**: styles.css
- **Status**: 📋 pending

## 📝 Implementation Notes

### Quick Wins:
- Color and typography changes (Tasks 1.1, 1.2)

### Complex Changes:
- Layout centering might affect responsive design (Task 1.3)

### Recommended Order:
1. Process typography first (1.1, 1.2)
2. Test layout changes carefully (1.3)
```

## Quality Assurance

### Before Generating Tasks:
- ✅ All annotations are parsed and understood
- ✅ Related changes are properly grouped
- ✅ Dependencies are identified
- ✅ Implementation approach is technically sound
- ✅ Potential conflicts are flagged

### Task List Validation:
- ✅ Each task has clear, actionable instructions
- ✅ Selectors are specific and accurate
- ✅ File locations are realistic
- ✅ Time estimates are reasonable
- ✅ Priority order makes logical sense

Remember: The goal is to transform scattered UI feedback into a coherent implementation plan that can be executed systematically using `@process-moat-tasks.mdc`.
